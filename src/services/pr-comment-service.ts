/**
 * PR Comment service for managing comments on pull requests
 */

import * as core from '@actions/core'
import * as github from '@actions/github'
import { AcrolinxAnalysisResult } from '../types/index.js'

/**
 * Interface for PR comment data
 */
export interface PRCommentData {
  owner: string
  repo: string
  prNumber: number
  results: AcrolinxAnalysisResult[]
}

/**
 * Get emoji based on quality score
 */
function getQualityEmoji(score: number): string {
  if (score >= 80) return 'üü¢'
  if (score >= 60) return 'üü°'
  return 'üî¥'
}

/**
 * Generate markdown table for analysis results
 */
function generateResultsTable(results: AcrolinxAnalysisResult[]): string {
  if (results.length === 0) {
    return 'No files were analyzed.'
  }

  const tableHeader = `| File | Quality | Clarity | Grammar | Style Guide | Tone | Terminology |
|------|---------|---------|---------|-------------|------|-------------|`

  const tableRows = results
    .map((result) => {
      const { filePath, result: scores } = result
      const qualityEmoji = getQualityEmoji(scores.quality.score)

      return `| ${filePath} | ${qualityEmoji} ${scores.quality.score} | ${scores.clarity.score} | ${scores.grammar.score} | ${scores.style_guide.score} | ${scores.tone.score} | ${scores.terminology.score} |`
    })
    .join('\n')

  return `${tableHeader}\n${tableRows}`
}

/**
 * Generate summary section
 */
function generateSummary(results: AcrolinxAnalysisResult[]): string {
  if (results.length === 0) {
    return ''
  }

  const totalQualityScore = results.reduce(
    (sum, result) => sum + result.result.quality.score,
    0
  )
  const totalClarityScore = results.reduce(
    (sum, result) => sum + result.result.clarity.score,
    0
  )
  const totalToneScore = results.reduce(
    (sum, result) => sum + result.result.tone.score,
    0
  )
  const totalGrammarScore = results.reduce(
    (sum, result) => sum + result.result.grammar.score,
    0
  )
  const totalStyleGuideScore = results.reduce(
    (sum, result) => sum + result.result.style_guide.score,
    0
  )
  const totalTerminologyScore = results.reduce(
    (sum, result) => sum + result.result.terminology.score,
    0
  )

  const averageQualityScore = Math.round(totalQualityScore / results.length)
  const averageClarityScore = Math.round(totalClarityScore / results.length)
  const averageToneScore = Math.round(totalToneScore / results.length)
  const averageGrammarScore = Math.round(totalGrammarScore / results.length)
  const averageStyleGuideScore = Math.round(
    totalStyleGuideScore / results.length
  )
  const averageTerminologyScore = Math.round(
    totalTerminologyScore / results.length
  )

  const overallQualityEmoji = getQualityEmoji(averageQualityScore)

  return `
## üìä Summary

**Overall Quality Score:** ${overallQualityEmoji} ${averageQualityScore}

| Metric | Average Score |
|--------|---------------|
| Quality | ${averageQualityScore} |
| Clarity | ${averageClarityScore} |
| Grammar | ${averageGrammarScore} |
| Style Guide | ${averageStyleGuideScore} |
| Tone | ${averageToneScore} |
| Terminology | ${averageTerminologyScore} |

**Files Analyzed:** ${results.length}
`
}

/**
 * Generate complete comment body
 */
function generateCommentBody(results: AcrolinxAnalysisResult[]): string {
  const header = `## üîç Acrolinx Analysis Results

This comment was automatically generated by the Acrolinx Analyzer GitHub Action.`

  const table = generateResultsTable(results)
  const summary = generateSummary(results)

  return `${header}

${table}

${summary}

---
*Analysis performed on ${new Date().toLocaleString()}*
*Quality Score Legend: üü¢ 80+ | üü° 60-79 | üî¥ 0-59*`
}

/**
 * Find existing Acrolinx comment on PR
 */
async function findExistingAcrolinxComment(
  octokit: ReturnType<typeof github.getOctokit>,
  owner: string,
  repo: string,
  prNumber: number
): Promise<number | null> {
  try {
    const response = await octokit.rest.issues.listComments({
      owner,
      repo,
      issue_number: prNumber
    })

    const acrolinxComment = response.data.find((comment) =>
      comment.body?.includes('## üîç Acrolinx Analysis Results')
    )

    return acrolinxComment?.id || null
  } catch (error) {
    core.warning(`Failed to find existing Acrolinx comment: ${error}`)
    return null
  }
}

/**
 * Create or update PR comment with analysis results
 */
export async function createOrUpdatePRComment(
  octokit: ReturnType<typeof github.getOctokit>,
  commentData: PRCommentData
): Promise<void> {
  const { owner, repo, prNumber, results } = commentData

  try {
    // Check if we have permission to comment on PRs
    try {
      await octokit.rest.repos.get({
        owner,
        repo
      })
    } catch (error: unknown) {
      const githubError = error as { status?: number }
      if (githubError.status === 403) {
        core.error(
          '‚ùå Permission denied: Cannot access repository. Make sure the GitHub token has "pull-requests: write" permission.'
        )
        return
      }
      throw error
    }

    const commentBody = generateCommentBody(results)
    const existingCommentId = await findExistingAcrolinxComment(
      octokit,
      owner,
      repo,
      prNumber
    )

    if (existingCommentId) {
      // Update existing comment
      await octokit.rest.issues.updateComment({
        owner,
        repo,
        comment_id: existingCommentId,
        body: commentBody
      })
      core.info(`‚úÖ Updated existing Acrolinx comment on PR #${prNumber}`)
    } else {
      // Create new comment
      await octokit.rest.issues.createComment({
        owner,
        repo,
        issue_number: prNumber,
        body: commentBody
      })
      core.info(`‚úÖ Created new Acrolinx comment on PR #${prNumber}`)
    }
  } catch (error: unknown) {
    const githubError = error as { status?: number; message?: string }
    if (githubError.status === 403) {
      core.error(
        '‚ùå Permission denied: Cannot create or update comments on pull requests.'
      )
      core.error(
        'Please ensure the GitHub token has "pull-requests: write" permission.'
      )
    } else if (githubError.status === 404) {
      core.error(
        '‚ùå Pull request not found. Make sure the PR exists and is accessible.'
      )
    } else {
      core.error(
        `‚ùå Failed to create/update PR comment: ${githubError.message}`
      )
    }
  }
}

/**
 * Check if current event is a pull request
 */
export function isPullRequestEvent(): boolean {
  return github.context.eventName === 'pull_request'
}

/**
 * Get PR number from context
 */
export function getPRNumber(): number | null {
  if (github.context.eventName === 'pull_request') {
    return github.context.issue.number
  }
  return null
}
