/**
 * Job Summary service for generating GitHub Actions Job Summaries
 */

import * as core from '@actions/core'
import { AcrolinxAnalysisResult, AnalysisOptions } from '../types/index.js'
import { getQualityEmoji, calculateScoreSummary } from '../utils/score-utils.js'

/**
 * Generate markdown table for analysis results
 */
function generateResultsTable(results: AcrolinxAnalysisResult[]): string {
  if (results.length === 0) {
    return 'No files were analyzed.'
  }

  const tableHeader = `| File | Quality | Clarity | Grammar | Style Guide | Tone | Terminology |
|------|---------|---------|---------|-------------|------|-------------|`

  const tableRows = results
    .map((result) => {
      const { filePath, result: scores } = result
      const qualityEmoji = getQualityEmoji(scores.quality.score)

      return `| ${filePath} | ${qualityEmoji} ${scores.quality.score} | ${scores.clarity.score} | ${scores.grammar.score} | ${scores.style_guide.score} | ${scores.tone.score} | ${scores.terminology.score} |`
    })
    .join('\n')

  return `${tableHeader}\n${tableRows}`
}

/**
 * Generate summary section
 */
function generateSummary(results: AcrolinxAnalysisResult[]): string {
  if (results.length === 0) {
    return ''
  }

  const summary = calculateScoreSummary(results)
  const overallQualityEmoji = getQualityEmoji(summary.averageQualityScore)

  return `
## üìä Summary

**Overall Quality Score:** ${overallQualityEmoji} ${summary.averageQualityScore}

| Metric | Average Score |
|--------|---------------|
| Quality | ${summary.averageQualityScore} |
| Clarity | ${summary.averageClarityScore} |
| Grammar | ${summary.averageGrammarScore} |
| Style Guide | ${summary.averageStyleGuideScore} |
| Tone | ${summary.averageToneScore} |
| Terminology | ${summary.averageTerminologyScore} |

**Files Analyzed:** ${summary.totalFiles}
`
}

/**
 * Generate complete job summary
 */
function generateJobSummary(
  results: AcrolinxAnalysisResult[],
  config: AnalysisOptions,
  eventType: string
): string {
  const header = `# üîç Acrolinx Analysis Results

This summary was automatically generated by the Acrolinx Analyzer GitHub Action for **${eventType}** event.`

  const table = generateResultsTable(results)
  const summary = generateSummary(results)

  return `${header}

${table}

${summary}

---
*Analysis performed on ${new Date().toLocaleString()}*
*Quality Score Legend: üü¢ 80+ | üü° 60-79 | üî¥ 0-59*
*Configuration: Dialect: ${config.dialect} | Tone: ${config.tone} | Style Guide: ${config.styleGuide}*`
}

/**
 * Create and write job summary to GitHub Actions
 */
export async function createJobSummary(
  results: AcrolinxAnalysisResult[],
  config: AnalysisOptions,
  eventType: string
): Promise<void> {
  try {
    if (results.length === 0) {
      await core.summary
        .addHeading('üîç Acrolinx Analysis Results')
        .addRaw('No files were analyzed.')
        .write()
      return
    }

    const summaryContent = generateJobSummary(results, config, eventType)

    await core.summary.addRaw(summaryContent).write()

    core.info('‚úÖ Job summary created successfully')
  } catch (error) {
    core.error(`Failed to create job summary: ${error}`)
  }
}
